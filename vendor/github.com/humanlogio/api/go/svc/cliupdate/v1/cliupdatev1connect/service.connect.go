// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/cliupdate/v1/service.proto

package cliupdatev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/humanlogio/api/go/svc/cliupdate/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UpdateServiceName is the fully-qualified name of the UpdateService service.
	UpdateServiceName = "svc.cliupdate.v1.UpdateService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UpdateServiceGetNextUpdateProcedure is the fully-qualified name of the UpdateService's
	// GetNextUpdate RPC.
	UpdateServiceGetNextUpdateProcedure = "/svc.cliupdate.v1.UpdateService/GetNextUpdate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	updateServiceServiceDescriptor             = v1.File_svc_cliupdate_v1_service_proto.Services().ByName("UpdateService")
	updateServiceGetNextUpdateMethodDescriptor = updateServiceServiceDescriptor.Methods().ByName("GetNextUpdate")
)

// UpdateServiceClient is a client for the svc.cliupdate.v1.UpdateService service.
type UpdateServiceClient interface {
	GetNextUpdate(context.Context, *connect.Request[v1.GetNextUpdateRequest]) (*connect.Response[v1.GetNextUpdateResponse], error)
}

// NewUpdateServiceClient constructs a client for the svc.cliupdate.v1.UpdateService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUpdateServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UpdateServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &updateServiceClient{
		getNextUpdate: connect.NewClient[v1.GetNextUpdateRequest, v1.GetNextUpdateResponse](
			httpClient,
			baseURL+UpdateServiceGetNextUpdateProcedure,
			connect.WithSchema(updateServiceGetNextUpdateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// updateServiceClient implements UpdateServiceClient.
type updateServiceClient struct {
	getNextUpdate *connect.Client[v1.GetNextUpdateRequest, v1.GetNextUpdateResponse]
}

// GetNextUpdate calls svc.cliupdate.v1.UpdateService.GetNextUpdate.
func (c *updateServiceClient) GetNextUpdate(ctx context.Context, req *connect.Request[v1.GetNextUpdateRequest]) (*connect.Response[v1.GetNextUpdateResponse], error) {
	return c.getNextUpdate.CallUnary(ctx, req)
}

// UpdateServiceHandler is an implementation of the svc.cliupdate.v1.UpdateService service.
type UpdateServiceHandler interface {
	GetNextUpdate(context.Context, *connect.Request[v1.GetNextUpdateRequest]) (*connect.Response[v1.GetNextUpdateResponse], error)
}

// NewUpdateServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUpdateServiceHandler(svc UpdateServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	updateServiceGetNextUpdateHandler := connect.NewUnaryHandler(
		UpdateServiceGetNextUpdateProcedure,
		svc.GetNextUpdate,
		connect.WithSchema(updateServiceGetNextUpdateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/svc.cliupdate.v1.UpdateService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UpdateServiceGetNextUpdateProcedure:
			updateServiceGetNextUpdateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUpdateServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUpdateServiceHandler struct{}

func (UnimplementedUpdateServiceHandler) GetNextUpdate(context.Context, *connect.Request[v1.GetNextUpdateRequest]) (*connect.Response[v1.GetNextUpdateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("svc.cliupdate.v1.UpdateService.GetNextUpdate is not implemented"))
}
