// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: svc/release/v1/service.proto

package releasev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/humanlogio/api/go/svc/release/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ReleaseServiceName is the fully-qualified name of the ReleaseService service.
	ReleaseServiceName = "svc.release.v1.ReleaseService"
)

// ReleaseServiceClient is a client for the svc.release.v1.ReleaseService service.
type ReleaseServiceClient interface {
	CreateRelease(context.Context, *connect_go.Request[v1.CreateReleaseRequest]) (*connect_go.Response[v1.CreateReleaseResponse], error)
}

// NewReleaseServiceClient constructs a client for the svc.release.v1.ReleaseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReleaseServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ReleaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &releaseServiceClient{
		createRelease: connect_go.NewClient[v1.CreateReleaseRequest, v1.CreateReleaseResponse](
			httpClient,
			baseURL+"/svc.release.v1.ReleaseService/CreateRelease",
			opts...,
		),
	}
}

// releaseServiceClient implements ReleaseServiceClient.
type releaseServiceClient struct {
	createRelease *connect_go.Client[v1.CreateReleaseRequest, v1.CreateReleaseResponse]
}

// CreateRelease calls svc.release.v1.ReleaseService.CreateRelease.
func (c *releaseServiceClient) CreateRelease(ctx context.Context, req *connect_go.Request[v1.CreateReleaseRequest]) (*connect_go.Response[v1.CreateReleaseResponse], error) {
	return c.createRelease.CallUnary(ctx, req)
}

// ReleaseServiceHandler is an implementation of the svc.release.v1.ReleaseService service.
type ReleaseServiceHandler interface {
	CreateRelease(context.Context, *connect_go.Request[v1.CreateReleaseRequest]) (*connect_go.Response[v1.CreateReleaseResponse], error)
}

// NewReleaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReleaseServiceHandler(svc ReleaseServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/svc.release.v1.ReleaseService/CreateRelease", connect_go.NewUnaryHandler(
		"/svc.release.v1.ReleaseService/CreateRelease",
		svc.CreateRelease,
		opts...,
	))
	return "/svc.release.v1.ReleaseService/", mux
}

// UnimplementedReleaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReleaseServiceHandler struct{}

func (UnimplementedReleaseServiceHandler) CreateRelease(context.Context, *connect_go.Request[v1.CreateReleaseRequest]) (*connect_go.Response[v1.CreateReleaseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("svc.release.v1.ReleaseService.CreateRelease is not implemented"))
}
